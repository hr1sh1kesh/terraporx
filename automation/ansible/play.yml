---
- hosts: all
  remote_user: root
  gather_facts: False
  pre_tasks:
  - raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
  - setup: # aka gather_facts

  vars:
       members: "{{ groups['nodes'] }}"
       lighthouse: "{{ groups['lighthouse'] }}"
       etcd_version: "3.2.7"
       docker_compose_version: "1.16.1"
       admin_user: "admin"
       admin_password: "password"
  tasks:
  - name: install python 2
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
  - name: Remove any old existing etcd
    package: 
      name: etcd
      state: absent
    ignore_errors: yes
  - name: Remove any old existing etcd2
    package: 
      name: etcd2
      state: absent
    ignore_errors: yes
  - name: install the latest version of wget
    package:
      name: wget
      state: latest
  - name: Set up persistent directory
    shell: |
         mkdir -p /var/lib/etcd
         chown -R root:root /var/lib/etcd
         chmod -R a+rw /var/lib/etcd
    when: inventory_hostname in groups['nodes']
  - name: Install new etcd
    shell: |
         wget https://github.com/coreos/etcd/releases/download/v{{ etcd_version }}/etcd-v{{ etcd_version }}-linux-amd64.tar.gz
         mkdir /tmp/etcd
         tar xzvf etcd-v{{ etcd_version }}-linux-amd64.tar.gz -C /tmp
         cd /tmp/etcd-v{{ etcd_version }}-linux-amd64
         mv etcd etcdctl /usr/local/bin
         chmod 755 /usr/local/bin/etcd /usr/local/bin/etcdctl
    when: inventory_hostname in groups['nodes']
  - name: Create etcd3.service file
    template:
       src: ./templates/etcd3.service.js
       dest: /etc/systemd/system/etcd3.service
       owner: root
       group: root
       mode: 0644
    when: inventory_hostname in groups['nodes']
  - name: Reload and start the services
    shell: |
       systemctl daemon-reload
       systemctl enable etcd3.service
       systemctl start  etcd3.service
    when: inventory_hostname in groups['nodes']
  - name: Install Docker
    shell: |
       curl -sSL https://get.docker.com | sh -s > /dev/null
       systemctl enable docker
       systemctl start docker
  - name: Create Docker-compose for Lighthouse
    template:
       src: ./templates/lh-compose.js
       dest: /root/docker-compose.yml
       owner: root
       group: root
       mode: 0644
    when: inventory_hostname in groups['lighthouse']
  - name: Install docker-compose on Lighthouse server
    shell: |
       curl -L https://github.com/docker/compose/releases/download/{{docker_compose_version}}/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose
       chmod 755 /usr/local/bin/docker-compose
    when: inventory_hostname in groups['lighthouse']
  - name: Run Lighthouse
    shell: docker-compose up -d
    when: inventory_hostname in groups['lighthouse']
  - name: Wait for Lighthouse to be ready
    shell: |
        while true
        do
           if ! curl -X GET -H "Accept:application/json" -H "Authorization:Basic cG9ydHdvcnhAeW91cmNvbXBhbnkuY29tOmFkbWlu"  http://{{ hostvars[groups['lighthouse'][0]].IP }} > /dev/null 2>&1 
           then  
                 echo "Waiting for px-lighthouse responsiveness ..." 
                 sleep 10 
                 continue
           else
                 echo "Lighthouse is running ..."
                 break
           fi
        done
    when: inventory_hostname in groups['lighthouse']
  - name: Get Cluster Token
    shell: |
      curl -XPOST -H 'Accept:application/json' -H 'Authorization:Basic cG9ydHdvcnhAeW91cmNvbXBhbnkuY29tOmFkbWlu'  http://{{ hostvars[groups['lighthouse'][0]].IP }}/api/clusters/create/\?name\=my-cluster\&clusterid\=my-cluster
    register: token
    when: inventory_hostname in groups['lighthouse']
  - debug: msg="{{ token.stdout_lines[0] }}"
    when: inventory_hostname in groups['lighthouse']
  - name: Create portworx.service file
    template:
       src: ./templates/px.service.js
       dest:  /etc/systemd/system/portworx.service
       owner: root
       group: root
       mode: 0644
    when: inventory_hostname in groups['nodes']
  - name: Reload and start the services
    shell: |
       systemctl daemon-reload
       systemctl enable portworx.service
       systemctl start  portworx.service
    when: inventory_hostname in groups['nodes']
