# -*- mode: ruby -*-
# vim:ft=ruby:sw=3:et:

vm_nodes = {            # Specify VM node names, and their VM-type (see 'vm_conf' below)
   'test1' => "centos7",
   'test2' => "centos7",
   'test3' => "centos7",
}

extra_disks = {         # Specify extra disks for each node, as "device"=>size (in MB)
   "sdb" => 10*1024,
#    "sdc" => 20*1024,
}

px_conf = {             # Portworx config
   "image" => "portworx/px-enterprise", # Docker image
   "kvdb"  => "etcd://70.0.0.27:2379",  # KVDB location
   "clid"  => "MY_CLUSTER_ID",          # ClusterID (should be unique)
   "devs"  => extra_disks.keys(),       # Disk devices for PX; define as array, ie: ['loop5']
   "netif" => "enp2s0f0",
}


# VM config:
# - format: <type-label> => [ box-name, vm-eth1-interface, vm-disk-controller, vm-starting-port ]
# - limitation note: can use only 1 drive on VM's w/ IDE controller
# see https://atlas.hashicorp.com/search? for more VM images (ie. "box-names")
vm_conf = {
   'ubuntu16' => [ 'ubuntu/xenial64', 'enp0s8', 'SCSI', 2 ],
   'centos7'  => [ 'centos/7', 'eth1', 'IDE', 1 ],
}

Vagrant.configure("2") do |config|

   config.vm.network "public_network", bridge: "#{px_conf['netif']}", use_dhcp_assigned_default_route: true

   vm_nodes.each do |host, typ|
      mybox, myvmif, mycntrl, myport = vm_conf[typ]
      mystorage = "-s /dev/" + px_conf['devs'].join(" -s /dev/")
      config.vm.define "#{host}" do |node|
         node.vm.box = "#{mybox}"
         node.vm.hostname = "#{host}"
         node.vm.provider "virtualbox" do |v|
            v.gui = false
            v.memory = 2048

            # Extra customizations
            v.customize 'pre-boot', ["modifyvm", :id, "--cpus", "1"]
            v.customize 'pre-boot', ["modifyvm", :id, "--chipset", "ich9"]
            v.customize 'pre-boot', ["modifyvm", :id, "--audio", "none"]
            v.customize 'pre-boot', ["storagectl", :id, "--name", "#{mycntrl}", "--hostiocache", "on"]

            if defined?(extra_disks)
               # NOTE: If you hit errors w/ extra disks provisioning, you may need to run "Virtual
               # Media Manager" via VirtualBox GUI, and manually remove $host_sdX drives.
               port = myport
               extra_disks.each do |hdd, size|
                  vdisk_name = ".vagrant/#{host}_#{hdd}.vdi"
                  unless File.exist?(vdisk_name)
                     v.customize ['createhd', '--filename', vdisk_name, '--size', "#{size}"]
                  end
                  v.customize ['storageattach', :id, '--storagectl', "#{mycntrl}", '--port', port, '--device', 0, '--type', 'hdd', '--medium', vdisk_name]
                  port = port + 1
               end
            end
         end
         node.vm.provision "shell" do |s|
             ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
             s.inline = <<-SHELL
               echo "Fixing ROOT access ..."
               sudo ssh-keygen -f /root/.ssh/id_rsa -t rsa -N ''
               echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
               echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
             SHELL
         end
      end
   end
end
